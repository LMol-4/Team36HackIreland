from openai import OpenAI
import os
from dotenv import load_dotenv
import sys

def judge_responses(questions, answers):
    """
    Given a list of questions and a list of corresponding answers, this function constructs
    a prompt to have the OpenAI API evaluate the responses. It returns the evaluator's feedback.

    Args:
        questions (list of str): List of questions.
        answers (list of str): List of answers corresponding to each question.

    Returns:
        str: The feedback message generated by the OpenAI API.
    """
    if len(questions) != len(answers):
        raise ValueError("The number of questions and answers must be the same.")

    # Construct a prompt that lists each question and its corresponding answer
    prompt_lines = [
        "Below are several questions along with the answers provided. Please evaluate each answer, highlighting strengths, identifying weaknesses, and suggesting improvements.",
        "Evaluation Criteria if applicable:",
        "- Clarity and Precision: Is the response clear, jargon-free, and concise?",
        "- Market and Business Insight: Does it demonstrate a solid understanding of the target market, customer needs, and competitive landscape?",
        "- Passion and Vision: Does the answer convey genuine commitment, a clear long-term vision, and enthusiasm for the idea?",
        "- Adaptability and Problem-Solving: Does it show responsiveness to feedback and a strong capability for overcoming challenges?"
    ]


    for idx, (q, a) in enumerate(zip(questions, answers), start=1):
        prompt_lines.append(f"Question {idx}: {q}")
        prompt_lines.append(f"Answer {idx}: {a}")
        prompt_lines.append("")  # blank line for readability

    prompt_text = "\n".join(prompt_lines)

    # Compute the path to the root directory (one level up) to load the .env file
    root_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..")
    dotenv_path = os.path.join(root_dir, ".env")
    load_dotenv(dotenv_path)

    # Retrieve the OpenAI API key from the .env file.
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        print("Error: OPENAI_API_KEY not found in .env file.")
        sys.exit(1)

    # Initialize the OpenAI client with the API key using the new format.
    client = OpenAI(api_key=openai_api_key)

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "system",
                "content": "You are an experienced evaluator who provides detailed, constructive feedback on answers to questions."
            },
            {
                "role": "user",
                "content": prompt_text
            }
        ],
        max_tokens=2000,
    )

    return completion.choices[0].message

if __name__ == "__main__":
    # Example usage:
    sample_questions = [
        "What is your revenue model?",
        "How do you plan to scale the business?"
    ]
    sample_answers = [
        "We plan to use a subscription-based revenue model, targeting mid-sized businesses.",
        "Our scaling strategy involves expanding to new markets and investing in technology."
    ]

    feedback = judge_responses(sample_questions, sample_answers)
    print("Evaluator Feedback:\n", feedback)
